#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Banking
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Banking_db")]
	public partial class DataBankingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertACC_TRANSACTION(ACC_TRANSACTION instance);
    partial void UpdateACC_TRANSACTION(ACC_TRANSACTION instance);
    partial void DeleteACC_TRANSACTION(ACC_TRANSACTION instance);
    partial void InsertACCOUNT(ACCOUNT instance);
    partial void UpdateACCOUNT(ACCOUNT instance);
    partial void DeleteACCOUNT(ACCOUNT instance);
    partial void InsertBRANCH(BRANCH instance);
    partial void UpdateBRANCH(BRANCH instance);
    partial void DeleteBRANCH(BRANCH instance);
    partial void InsertBUSINESS(BUSINESS instance);
    partial void UpdateBUSINESS(BUSINESS instance);
    partial void DeleteBUSINESS(BUSINESS instance);
    partial void InsertCUSTOMER(CUSTOMER instance);
    partial void UpdateCUSTOMER(CUSTOMER instance);
    partial void DeleteCUSTOMER(CUSTOMER instance);
    partial void InsertDEPARTMENT(DEPARTMENT instance);
    partial void UpdateDEPARTMENT(DEPARTMENT instance);
    partial void DeleteDEPARTMENT(DEPARTMENT instance);
    partial void InsertEMPLOYEE(EMPLOYEE instance);
    partial void UpdateEMPLOYEE(EMPLOYEE instance);
    partial void DeleteEMPLOYEE(EMPLOYEE instance);
    partial void InsertINDIVIDUAL(INDIVIDUAL instance);
    partial void UpdateINDIVIDUAL(INDIVIDUAL instance);
    partial void DeleteINDIVIDUAL(INDIVIDUAL instance);
    partial void InsertOFFICER(OFFICER instance);
    partial void UpdateOFFICER(OFFICER instance);
    partial void DeleteOFFICER(OFFICER instance);
    partial void InsertPRODUCT(PRODUCT instance);
    partial void UpdatePRODUCT(PRODUCT instance);
    partial void DeletePRODUCT(PRODUCT instance);
    partial void InsertPRODUCT_TYPE(PRODUCT_TYPE instance);
    partial void UpdatePRODUCT_TYPE(PRODUCT_TYPE instance);
    partial void DeletePRODUCT_TYPE(PRODUCT_TYPE instance);
    #endregion
		
		public DataBankingDataContext() : 
				base(global::Banking.Properties.Settings.Default.Banking_dbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataBankingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBankingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBankingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBankingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ACC_TRANSACTION> ACC_TRANSACTION
		{
			get
			{
				return this.GetTable<ACC_TRANSACTION>();
			}
		}
		
		public System.Data.Linq.Table<ACCOUNT> ACCOUNT
		{
			get
			{
				return this.GetTable<ACCOUNT>();
			}
		}
		
		public System.Data.Linq.Table<BRANCH> BRANCH
		{
			get
			{
				return this.GetTable<BRANCH>();
			}
		}
		
		public System.Data.Linq.Table<BUSINESS> BUSINESS
		{
			get
			{
				return this.GetTable<BUSINESS>();
			}
		}
		
		public System.Data.Linq.Table<CUSTOMER> CUSTOMER
		{
			get
			{
				return this.GetTable<CUSTOMER>();
			}
		}
		
		public System.Data.Linq.Table<DEPARTMENT> DEPARTMENT
		{
			get
			{
				return this.GetTable<DEPARTMENT>();
			}
		}
		
		public System.Data.Linq.Table<EMPLOYEE> EMPLOYEE
		{
			get
			{
				return this.GetTable<EMPLOYEE>();
			}
		}
		
		public System.Data.Linq.Table<INDIVIDUAL> INDIVIDUAL
		{
			get
			{
				return this.GetTable<INDIVIDUAL>();
			}
		}
		
		public System.Data.Linq.Table<OFFICER> OFFICER
		{
			get
			{
				return this.GetTable<OFFICER>();
			}
		}
		
		public System.Data.Linq.Table<PRODUCT> PRODUCT
		{
			get
			{
				return this.GetTable<PRODUCT>();
			}
		}
		
		public System.Data.Linq.Table<PRODUCT_TYPE> PRODUCT_TYPE
		{
			get
			{
				return this.GetTable<PRODUCT_TYPE>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ACC_TRANSACTION")]
	public partial class ACC_TRANSACTION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _TXN_ID;
		
		private double _AMOUNT;
		
		private System.DateTime _FUNDS_AVAIL_DATE;
		
		private System.DateTime _TXN_DATE;
		
		private string _TXN_TYPE_CD;
		
		private System.Nullable<int> _ACCOUNT_ID;
		
		private System.Nullable<int> _EXECUTION_BRANCH_ID;
		
		private System.Nullable<int> _TELLER_EMP_ID;
		
		private EntityRef<ACCOUNT> _ACCOUNT;
		
		private EntityRef<BRANCH> _BRANCH;
		
		private EntityRef<EMPLOYEE> _EMPLOYEE;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTXN_IDChanging(decimal value);
    partial void OnTXN_IDChanged();
    partial void OnAMOUNTChanging(double value);
    partial void OnAMOUNTChanged();
    partial void OnFUNDS_AVAIL_DATEChanging(System.DateTime value);
    partial void OnFUNDS_AVAIL_DATEChanged();
    partial void OnTXN_DATEChanging(System.DateTime value);
    partial void OnTXN_DATEChanged();
    partial void OnTXN_TYPE_CDChanging(string value);
    partial void OnTXN_TYPE_CDChanged();
    partial void OnACCOUNT_IDChanging(System.Nullable<int> value);
    partial void OnACCOUNT_IDChanged();
    partial void OnEXECUTION_BRANCH_IDChanging(System.Nullable<int> value);
    partial void OnEXECUTION_BRANCH_IDChanged();
    partial void OnTELLER_EMP_IDChanging(System.Nullable<int> value);
    partial void OnTELLER_EMP_IDChanged();
    #endregion
		
		public ACC_TRANSACTION()
		{
			this._ACCOUNT = default(EntityRef<ACCOUNT>);
			this._BRANCH = default(EntityRef<BRANCH>);
			this._EMPLOYEE = default(EntityRef<EMPLOYEE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TXN_ID", AutoSync=AutoSync.OnInsert, DbType="Decimal(19,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal TXN_ID
		{
			get
			{
				return this._TXN_ID;
			}
			set
			{
				if ((this._TXN_ID != value))
				{
					this.OnTXN_IDChanging(value);
					this.SendPropertyChanging();
					this._TXN_ID = value;
					this.SendPropertyChanged("TXN_ID");
					this.OnTXN_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMOUNT", DbType="Float NOT NULL")]
		public double AMOUNT
		{
			get
			{
				return this._AMOUNT;
			}
			set
			{
				if ((this._AMOUNT != value))
				{
					this.OnAMOUNTChanging(value);
					this.SendPropertyChanging();
					this._AMOUNT = value;
					this.SendPropertyChanged("AMOUNT");
					this.OnAMOUNTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FUNDS_AVAIL_DATE", DbType="DateTime NOT NULL")]
		public System.DateTime FUNDS_AVAIL_DATE
		{
			get
			{
				return this._FUNDS_AVAIL_DATE;
			}
			set
			{
				if ((this._FUNDS_AVAIL_DATE != value))
				{
					this.OnFUNDS_AVAIL_DATEChanging(value);
					this.SendPropertyChanging();
					this._FUNDS_AVAIL_DATE = value;
					this.SendPropertyChanged("FUNDS_AVAIL_DATE");
					this.OnFUNDS_AVAIL_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TXN_DATE", DbType="DateTime NOT NULL")]
		public System.DateTime TXN_DATE
		{
			get
			{
				return this._TXN_DATE;
			}
			set
			{
				if ((this._TXN_DATE != value))
				{
					this.OnTXN_DATEChanging(value);
					this.SendPropertyChanging();
					this._TXN_DATE = value;
					this.SendPropertyChanged("TXN_DATE");
					this.OnTXN_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TXN_TYPE_CD", DbType="VarChar(10)")]
		public string TXN_TYPE_CD
		{
			get
			{
				return this._TXN_TYPE_CD;
			}
			set
			{
				if ((this._TXN_TYPE_CD != value))
				{
					this.OnTXN_TYPE_CDChanging(value);
					this.SendPropertyChanging();
					this._TXN_TYPE_CD = value;
					this.SendPropertyChanged("TXN_TYPE_CD");
					this.OnTXN_TYPE_CDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACCOUNT_ID", DbType="Int")]
		public System.Nullable<int> ACCOUNT_ID
		{
			get
			{
				return this._ACCOUNT_ID;
			}
			set
			{
				if ((this._ACCOUNT_ID != value))
				{
					if (this._ACCOUNT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACCOUNT_IDChanging(value);
					this.SendPropertyChanging();
					this._ACCOUNT_ID = value;
					this.SendPropertyChanged("ACCOUNT_ID");
					this.OnACCOUNT_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EXECUTION_BRANCH_ID", DbType="Int")]
		public System.Nullable<int> EXECUTION_BRANCH_ID
		{
			get
			{
				return this._EXECUTION_BRANCH_ID;
			}
			set
			{
				if ((this._EXECUTION_BRANCH_ID != value))
				{
					if (this._BRANCH.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEXECUTION_BRANCH_IDChanging(value);
					this.SendPropertyChanging();
					this._EXECUTION_BRANCH_ID = value;
					this.SendPropertyChanged("EXECUTION_BRANCH_ID");
					this.OnEXECUTION_BRANCH_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TELLER_EMP_ID", DbType="Int")]
		public System.Nullable<int> TELLER_EMP_ID
		{
			get
			{
				return this._TELLER_EMP_ID;
			}
			set
			{
				if ((this._TELLER_EMP_ID != value))
				{
					if (this._EMPLOYEE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTELLER_EMP_IDChanging(value);
					this.SendPropertyChanging();
					this._TELLER_EMP_ID = value;
					this.SendPropertyChanged("TELLER_EMP_ID");
					this.OnTELLER_EMP_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ACCOUNT_ACC_TRANSACTION", Storage="_ACCOUNT", ThisKey="ACCOUNT_ID", OtherKey="ACCOUNT_ID", IsForeignKey=true)]
		public ACCOUNT ACCOUNT
		{
			get
			{
				return this._ACCOUNT.Entity;
			}
			set
			{
				ACCOUNT previousValue = this._ACCOUNT.Entity;
				if (((previousValue != value) 
							|| (this._ACCOUNT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ACCOUNT.Entity = null;
						previousValue.ACC_TRANSACTION.Remove(this);
					}
					this._ACCOUNT.Entity = value;
					if ((value != null))
					{
						value.ACC_TRANSACTION.Add(this);
						this._ACCOUNT_ID = value.ACCOUNT_ID;
					}
					else
					{
						this._ACCOUNT_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ACCOUNT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BRANCH_ACC_TRANSACTION", Storage="_BRANCH", ThisKey="EXECUTION_BRANCH_ID", OtherKey="BRANCH_ID", IsForeignKey=true)]
		public BRANCH BRANCH
		{
			get
			{
				return this._BRANCH.Entity;
			}
			set
			{
				BRANCH previousValue = this._BRANCH.Entity;
				if (((previousValue != value) 
							|| (this._BRANCH.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BRANCH.Entity = null;
						previousValue.ACC_TRANSACTION.Remove(this);
					}
					this._BRANCH.Entity = value;
					if ((value != null))
					{
						value.ACC_TRANSACTION.Add(this);
						this._EXECUTION_BRANCH_ID = value.BRANCH_ID;
					}
					else
					{
						this._EXECUTION_BRANCH_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("BRANCH");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_ACC_TRANSACTION", Storage="_EMPLOYEE", ThisKey="TELLER_EMP_ID", OtherKey="EMP_ID", IsForeignKey=true)]
		public EMPLOYEE EMPLOYEE
		{
			get
			{
				return this._EMPLOYEE.Entity;
			}
			set
			{
				EMPLOYEE previousValue = this._EMPLOYEE.Entity;
				if (((previousValue != value) 
							|| (this._EMPLOYEE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EMPLOYEE.Entity = null;
						previousValue.ACC_TRANSACTION.Remove(this);
					}
					this._EMPLOYEE.Entity = value;
					if ((value != null))
					{
						value.ACC_TRANSACTION.Add(this);
						this._TELLER_EMP_ID = value.EMP_ID;
					}
					else
					{
						this._TELLER_EMP_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("EMPLOYEE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ACCOUNT")]
	public partial class ACCOUNT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ACCOUNT_ID;
		
		private System.Nullable<double> _AVAIL_BALANCE;
		
		private System.Nullable<System.DateTime> _CLOSE_DATE;
		
		private System.Nullable<System.DateTime> _LAST_ACTIVITY_DATE;
		
		private System.DateTime _OPEN_DATE;
		
		private System.Nullable<double> _PENDING_BALANCE;
		
		private string _STATUS;
		
		private System.Nullable<int> _CUST_ID;
		
		private int _OPEN_BRANCH_ID;
		
		private int _OPEN_EMP_ID;
		
		private string _PRODUCT_CD;
		
		private EntitySet<ACC_TRANSACTION> _ACC_TRANSACTION;
		
		private EntityRef<BRANCH> _BRANCH;
		
		private EntityRef<CUSTOMER> _CUSTOMER;
		
		private EntityRef<EMPLOYEE> _EMPLOYEE;
		
		private EntityRef<PRODUCT> _PRODUCT;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnACCOUNT_IDChanging(int value);
    partial void OnACCOUNT_IDChanged();
    partial void OnAVAIL_BALANCEChanging(System.Nullable<double> value);
    partial void OnAVAIL_BALANCEChanged();
    partial void OnCLOSE_DATEChanging(System.Nullable<System.DateTime> value);
    partial void OnCLOSE_DATEChanged();
    partial void OnLAST_ACTIVITY_DATEChanging(System.Nullable<System.DateTime> value);
    partial void OnLAST_ACTIVITY_DATEChanged();
    partial void OnOPEN_DATEChanging(System.DateTime value);
    partial void OnOPEN_DATEChanged();
    partial void OnPENDING_BALANCEChanging(System.Nullable<double> value);
    partial void OnPENDING_BALANCEChanged();
    partial void OnSTATUSChanging(string value);
    partial void OnSTATUSChanged();
    partial void OnCUST_IDChanging(System.Nullable<int> value);
    partial void OnCUST_IDChanged();
    partial void OnOPEN_BRANCH_IDChanging(int value);
    partial void OnOPEN_BRANCH_IDChanged();
    partial void OnOPEN_EMP_IDChanging(int value);
    partial void OnOPEN_EMP_IDChanged();
    partial void OnPRODUCT_CDChanging(string value);
    partial void OnPRODUCT_CDChanged();
    #endregion
		
		public ACCOUNT()
		{
			this._ACC_TRANSACTION = new EntitySet<ACC_TRANSACTION>(new Action<ACC_TRANSACTION>(this.attach_ACC_TRANSACTION), new Action<ACC_TRANSACTION>(this.detach_ACC_TRANSACTION));
			this._BRANCH = default(EntityRef<BRANCH>);
			this._CUSTOMER = default(EntityRef<CUSTOMER>);
			this._EMPLOYEE = default(EntityRef<EMPLOYEE>);
			this._PRODUCT = default(EntityRef<PRODUCT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACCOUNT_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ACCOUNT_ID
		{
			get
			{
				return this._ACCOUNT_ID;
			}
			set
			{
				if ((this._ACCOUNT_ID != value))
				{
					this.OnACCOUNT_IDChanging(value);
					this.SendPropertyChanging();
					this._ACCOUNT_ID = value;
					this.SendPropertyChanged("ACCOUNT_ID");
					this.OnACCOUNT_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AVAIL_BALANCE", DbType="Float")]
		public System.Nullable<double> AVAIL_BALANCE
		{
			get
			{
				return this._AVAIL_BALANCE;
			}
			set
			{
				if ((this._AVAIL_BALANCE != value))
				{
					this.OnAVAIL_BALANCEChanging(value);
					this.SendPropertyChanging();
					this._AVAIL_BALANCE = value;
					this.SendPropertyChanged("AVAIL_BALANCE");
					this.OnAVAIL_BALANCEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CLOSE_DATE", DbType="DateTime")]
		public System.Nullable<System.DateTime> CLOSE_DATE
		{
			get
			{
				return this._CLOSE_DATE;
			}
			set
			{
				if ((this._CLOSE_DATE != value))
				{
					this.OnCLOSE_DATEChanging(value);
					this.SendPropertyChanging();
					this._CLOSE_DATE = value;
					this.SendPropertyChanged("CLOSE_DATE");
					this.OnCLOSE_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LAST_ACTIVITY_DATE", DbType="DateTime")]
		public System.Nullable<System.DateTime> LAST_ACTIVITY_DATE
		{
			get
			{
				return this._LAST_ACTIVITY_DATE;
			}
			set
			{
				if ((this._LAST_ACTIVITY_DATE != value))
				{
					this.OnLAST_ACTIVITY_DATEChanging(value);
					this.SendPropertyChanging();
					this._LAST_ACTIVITY_DATE = value;
					this.SendPropertyChanged("LAST_ACTIVITY_DATE");
					this.OnLAST_ACTIVITY_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OPEN_DATE", DbType="DateTime NOT NULL")]
		public System.DateTime OPEN_DATE
		{
			get
			{
				return this._OPEN_DATE;
			}
			set
			{
				if ((this._OPEN_DATE != value))
				{
					this.OnOPEN_DATEChanging(value);
					this.SendPropertyChanging();
					this._OPEN_DATE = value;
					this.SendPropertyChanged("OPEN_DATE");
					this.OnOPEN_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PENDING_BALANCE", DbType="Float")]
		public System.Nullable<double> PENDING_BALANCE
		{
			get
			{
				return this._PENDING_BALANCE;
			}
			set
			{
				if ((this._PENDING_BALANCE != value))
				{
					this.OnPENDING_BALANCEChanging(value);
					this.SendPropertyChanging();
					this._PENDING_BALANCE = value;
					this.SendPropertyChanged("PENDING_BALANCE");
					this.OnPENDING_BALANCEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STATUS", DbType="VarChar(10)")]
		public string STATUS
		{
			get
			{
				return this._STATUS;
			}
			set
			{
				if ((this._STATUS != value))
				{
					this.OnSTATUSChanging(value);
					this.SendPropertyChanging();
					this._STATUS = value;
					this.SendPropertyChanged("STATUS");
					this.OnSTATUSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUST_ID", DbType="Int")]
		public System.Nullable<int> CUST_ID
		{
			get
			{
				return this._CUST_ID;
			}
			set
			{
				if ((this._CUST_ID != value))
				{
					if (this._CUSTOMER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCUST_IDChanging(value);
					this.SendPropertyChanging();
					this._CUST_ID = value;
					this.SendPropertyChanged("CUST_ID");
					this.OnCUST_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OPEN_BRANCH_ID", DbType="Int NOT NULL")]
		public int OPEN_BRANCH_ID
		{
			get
			{
				return this._OPEN_BRANCH_ID;
			}
			set
			{
				if ((this._OPEN_BRANCH_ID != value))
				{
					if (this._BRANCH.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOPEN_BRANCH_IDChanging(value);
					this.SendPropertyChanging();
					this._OPEN_BRANCH_ID = value;
					this.SendPropertyChanged("OPEN_BRANCH_ID");
					this.OnOPEN_BRANCH_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OPEN_EMP_ID", DbType="Int NOT NULL")]
		public int OPEN_EMP_ID
		{
			get
			{
				return this._OPEN_EMP_ID;
			}
			set
			{
				if ((this._OPEN_EMP_ID != value))
				{
					if (this._EMPLOYEE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOPEN_EMP_IDChanging(value);
					this.SendPropertyChanging();
					this._OPEN_EMP_ID = value;
					this.SendPropertyChanged("OPEN_EMP_ID");
					this.OnOPEN_EMP_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCT_CD", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string PRODUCT_CD
		{
			get
			{
				return this._PRODUCT_CD;
			}
			set
			{
				if ((this._PRODUCT_CD != value))
				{
					if (this._PRODUCT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPRODUCT_CDChanging(value);
					this.SendPropertyChanging();
					this._PRODUCT_CD = value;
					this.SendPropertyChanged("PRODUCT_CD");
					this.OnPRODUCT_CDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ACCOUNT_ACC_TRANSACTION", Storage="_ACC_TRANSACTION", ThisKey="ACCOUNT_ID", OtherKey="ACCOUNT_ID")]
		public EntitySet<ACC_TRANSACTION> ACC_TRANSACTION
		{
			get
			{
				return this._ACC_TRANSACTION;
			}
			set
			{
				this._ACC_TRANSACTION.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BRANCH_ACCOUNT", Storage="_BRANCH", ThisKey="OPEN_BRANCH_ID", OtherKey="BRANCH_ID", IsForeignKey=true)]
		public BRANCH BRANCH
		{
			get
			{
				return this._BRANCH.Entity;
			}
			set
			{
				BRANCH previousValue = this._BRANCH.Entity;
				if (((previousValue != value) 
							|| (this._BRANCH.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BRANCH.Entity = null;
						previousValue.ACCOUNT.Remove(this);
					}
					this._BRANCH.Entity = value;
					if ((value != null))
					{
						value.ACCOUNT.Add(this);
						this._OPEN_BRANCH_ID = value.BRANCH_ID;
					}
					else
					{
						this._OPEN_BRANCH_ID = default(int);
					}
					this.SendPropertyChanged("BRANCH");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_ACCOUNT", Storage="_CUSTOMER", ThisKey="CUST_ID", OtherKey="CUST_ID", IsForeignKey=true)]
		public CUSTOMER CUSTOMER
		{
			get
			{
				return this._CUSTOMER.Entity;
			}
			set
			{
				CUSTOMER previousValue = this._CUSTOMER.Entity;
				if (((previousValue != value) 
							|| (this._CUSTOMER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CUSTOMER.Entity = null;
						previousValue.ACCOUNT.Remove(this);
					}
					this._CUSTOMER.Entity = value;
					if ((value != null))
					{
						value.ACCOUNT.Add(this);
						this._CUST_ID = value.CUST_ID;
					}
					else
					{
						this._CUST_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CUSTOMER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_ACCOUNT", Storage="_EMPLOYEE", ThisKey="OPEN_EMP_ID", OtherKey="EMP_ID", IsForeignKey=true)]
		public EMPLOYEE EMPLOYEE
		{
			get
			{
				return this._EMPLOYEE.Entity;
			}
			set
			{
				EMPLOYEE previousValue = this._EMPLOYEE.Entity;
				if (((previousValue != value) 
							|| (this._EMPLOYEE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EMPLOYEE.Entity = null;
						previousValue.ACCOUNT.Remove(this);
					}
					this._EMPLOYEE.Entity = value;
					if ((value != null))
					{
						value.ACCOUNT.Add(this);
						this._OPEN_EMP_ID = value.EMP_ID;
					}
					else
					{
						this._OPEN_EMP_ID = default(int);
					}
					this.SendPropertyChanged("EMPLOYEE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCT_ACCOUNT", Storage="_PRODUCT", ThisKey="PRODUCT_CD", OtherKey="PRODUCT_CD", IsForeignKey=true)]
		public PRODUCT PRODUCT
		{
			get
			{
				return this._PRODUCT.Entity;
			}
			set
			{
				PRODUCT previousValue = this._PRODUCT.Entity;
				if (((previousValue != value) 
							|| (this._PRODUCT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PRODUCT.Entity = null;
						previousValue.ACCOUNT.Remove(this);
					}
					this._PRODUCT.Entity = value;
					if ((value != null))
					{
						value.ACCOUNT.Add(this);
						this._PRODUCT_CD = value.PRODUCT_CD;
					}
					else
					{
						this._PRODUCT_CD = default(string);
					}
					this.SendPropertyChanged("PRODUCT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ACC_TRANSACTION(ACC_TRANSACTION entity)
		{
			this.SendPropertyChanging();
			entity.ACCOUNT = this;
		}
		
		private void detach_ACC_TRANSACTION(ACC_TRANSACTION entity)
		{
			this.SendPropertyChanging();
			entity.ACCOUNT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BRANCH")]
	public partial class BRANCH : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BRANCH_ID;
		
		private string _ADDRESS;
		
		private string _CITY;
		
		private string _NAME;
		
		private string _STATE;
		
		private string _ZIP_CODE;
		
		private EntitySet<ACC_TRANSACTION> _ACC_TRANSACTION;
		
		private EntitySet<ACCOUNT> _ACCOUNT;
		
		private EntitySet<EMPLOYEE> _EMPLOYEE;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBRANCH_IDChanging(int value);
    partial void OnBRANCH_IDChanged();
    partial void OnADDRESSChanging(string value);
    partial void OnADDRESSChanged();
    partial void OnCITYChanging(string value);
    partial void OnCITYChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnSTATEChanging(string value);
    partial void OnSTATEChanged();
    partial void OnZIP_CODEChanging(string value);
    partial void OnZIP_CODEChanged();
    #endregion
		
		public BRANCH()
		{
			this._ACC_TRANSACTION = new EntitySet<ACC_TRANSACTION>(new Action<ACC_TRANSACTION>(this.attach_ACC_TRANSACTION), new Action<ACC_TRANSACTION>(this.detach_ACC_TRANSACTION));
			this._ACCOUNT = new EntitySet<ACCOUNT>(new Action<ACCOUNT>(this.attach_ACCOUNT), new Action<ACCOUNT>(this.detach_ACCOUNT));
			this._EMPLOYEE = new EntitySet<EMPLOYEE>(new Action<EMPLOYEE>(this.attach_EMPLOYEE), new Action<EMPLOYEE>(this.detach_EMPLOYEE));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BRANCH_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BRANCH_ID
		{
			get
			{
				return this._BRANCH_ID;
			}
			set
			{
				if ((this._BRANCH_ID != value))
				{
					this.OnBRANCH_IDChanging(value);
					this.SendPropertyChanging();
					this._BRANCH_ID = value;
					this.SendPropertyChanged("BRANCH_ID");
					this.OnBRANCH_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADDRESS", DbType="VarChar(30)")]
		public string ADDRESS
		{
			get
			{
				return this._ADDRESS;
			}
			set
			{
				if ((this._ADDRESS != value))
				{
					this.OnADDRESSChanging(value);
					this.SendPropertyChanging();
					this._ADDRESS = value;
					this.SendPropertyChanged("ADDRESS");
					this.OnADDRESSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CITY", DbType="VarChar(20)")]
		public string CITY
		{
			get
			{
				return this._CITY;
			}
			set
			{
				if ((this._CITY != value))
				{
					this.OnCITYChanging(value);
					this.SendPropertyChanging();
					this._CITY = value;
					this.SendPropertyChanged("CITY");
					this.OnCITYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STATE", DbType="VarChar(10)")]
		public string STATE
		{
			get
			{
				return this._STATE;
			}
			set
			{
				if ((this._STATE != value))
				{
					this.OnSTATEChanging(value);
					this.SendPropertyChanging();
					this._STATE = value;
					this.SendPropertyChanged("STATE");
					this.OnSTATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZIP_CODE", DbType="VarChar(12)")]
		public string ZIP_CODE
		{
			get
			{
				return this._ZIP_CODE;
			}
			set
			{
				if ((this._ZIP_CODE != value))
				{
					this.OnZIP_CODEChanging(value);
					this.SendPropertyChanging();
					this._ZIP_CODE = value;
					this.SendPropertyChanged("ZIP_CODE");
					this.OnZIP_CODEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BRANCH_ACC_TRANSACTION", Storage="_ACC_TRANSACTION", ThisKey="BRANCH_ID", OtherKey="EXECUTION_BRANCH_ID")]
		public EntitySet<ACC_TRANSACTION> ACC_TRANSACTION
		{
			get
			{
				return this._ACC_TRANSACTION;
			}
			set
			{
				this._ACC_TRANSACTION.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BRANCH_ACCOUNT", Storage="_ACCOUNT", ThisKey="BRANCH_ID", OtherKey="OPEN_BRANCH_ID")]
		public EntitySet<ACCOUNT> ACCOUNT
		{
			get
			{
				return this._ACCOUNT;
			}
			set
			{
				this._ACCOUNT.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BRANCH_EMPLOYEE", Storage="_EMPLOYEE", ThisKey="BRANCH_ID", OtherKey="ASSIGNED_BRANCH_ID")]
		public EntitySet<EMPLOYEE> EMPLOYEE
		{
			get
			{
				return this._EMPLOYEE;
			}
			set
			{
				this._EMPLOYEE.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ACC_TRANSACTION(ACC_TRANSACTION entity)
		{
			this.SendPropertyChanging();
			entity.BRANCH = this;
		}
		
		private void detach_ACC_TRANSACTION(ACC_TRANSACTION entity)
		{
			this.SendPropertyChanging();
			entity.BRANCH = null;
		}
		
		private void attach_ACCOUNT(ACCOUNT entity)
		{
			this.SendPropertyChanging();
			entity.BRANCH = this;
		}
		
		private void detach_ACCOUNT(ACCOUNT entity)
		{
			this.SendPropertyChanging();
			entity.BRANCH = null;
		}
		
		private void attach_EMPLOYEE(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.BRANCH = this;
		}
		
		private void detach_EMPLOYEE(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.BRANCH = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BUSINESS")]
	public partial class BUSINESS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<System.DateTime> _INCORP_DATE;
		
		private string _NAME;
		
		private string _STATE_ID;
		
		private int _CUST_ID;
		
		private EntityRef<CUSTOMER> _CUSTOMER;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnINCORP_DATEChanging(System.Nullable<System.DateTime> value);
    partial void OnINCORP_DATEChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnSTATE_IDChanging(string value);
    partial void OnSTATE_IDChanged();
    partial void OnCUST_IDChanging(int value);
    partial void OnCUST_IDChanged();
    #endregion
		
		public BUSINESS()
		{
			this._CUSTOMER = default(EntityRef<CUSTOMER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_INCORP_DATE", DbType="DateTime")]
		public System.Nullable<System.DateTime> INCORP_DATE
		{
			get
			{
				return this._INCORP_DATE;
			}
			set
			{
				if ((this._INCORP_DATE != value))
				{
					this.OnINCORP_DATEChanging(value);
					this.SendPropertyChanging();
					this._INCORP_DATE = value;
					this.SendPropertyChanged("INCORP_DATE");
					this.OnINCORP_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STATE_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string STATE_ID
		{
			get
			{
				return this._STATE_ID;
			}
			set
			{
				if ((this._STATE_ID != value))
				{
					this.OnSTATE_IDChanging(value);
					this.SendPropertyChanging();
					this._STATE_ID = value;
					this.SendPropertyChanged("STATE_ID");
					this.OnSTATE_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUST_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CUST_ID
		{
			get
			{
				return this._CUST_ID;
			}
			set
			{
				if ((this._CUST_ID != value))
				{
					if (this._CUSTOMER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCUST_IDChanging(value);
					this.SendPropertyChanging();
					this._CUST_ID = value;
					this.SendPropertyChanged("CUST_ID");
					this.OnCUST_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_BUSINESS", Storage="_CUSTOMER", ThisKey="CUST_ID", OtherKey="CUST_ID", IsForeignKey=true)]
		public CUSTOMER CUSTOMER
		{
			get
			{
				return this._CUSTOMER.Entity;
			}
			set
			{
				CUSTOMER previousValue = this._CUSTOMER.Entity;
				if (((previousValue != value) 
							|| (this._CUSTOMER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CUSTOMER.Entity = null;
						previousValue.BUSINESS = null;
					}
					this._CUSTOMER.Entity = value;
					if ((value != null))
					{
						value.BUSINESS = this;
						this._CUST_ID = value.CUST_ID;
					}
					else
					{
						this._CUST_ID = default(int);
					}
					this.SendPropertyChanged("CUSTOMER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CUSTOMER")]
	public partial class CUSTOMER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CUST_ID;
		
		private string _ADDRESS;
		
		private string _CITY;
		
		private string _CUST_TYPE_CD;
		
		private string _FED_ID;
		
		private string _POSTAL_CODE;
		
		private string _STATE;
		
		private EntitySet<ACCOUNT> _ACCOUNT;
		
		private EntityRef<BUSINESS> _BUSINESS;
		
		private EntityRef<INDIVIDUAL> _INDIVIDUAL;
		
		private EntitySet<OFFICER> _OFFICER;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCUST_IDChanging(int value);
    partial void OnCUST_IDChanged();
    partial void OnADDRESSChanging(string value);
    partial void OnADDRESSChanged();
    partial void OnCITYChanging(string value);
    partial void OnCITYChanged();
    partial void OnCUST_TYPE_CDChanging(string value);
    partial void OnCUST_TYPE_CDChanged();
    partial void OnFED_IDChanging(string value);
    partial void OnFED_IDChanged();
    partial void OnPOSTAL_CODEChanging(string value);
    partial void OnPOSTAL_CODEChanged();
    partial void OnSTATEChanging(string value);
    partial void OnSTATEChanged();
    #endregion
		
		public CUSTOMER()
		{
			this._ACCOUNT = new EntitySet<ACCOUNT>(new Action<ACCOUNT>(this.attach_ACCOUNT), new Action<ACCOUNT>(this.detach_ACCOUNT));
			this._BUSINESS = default(EntityRef<BUSINESS>);
			this._INDIVIDUAL = default(EntityRef<INDIVIDUAL>);
			this._OFFICER = new EntitySet<OFFICER>(new Action<OFFICER>(this.attach_OFFICER), new Action<OFFICER>(this.detach_OFFICER));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUST_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CUST_ID
		{
			get
			{
				return this._CUST_ID;
			}
			set
			{
				if ((this._CUST_ID != value))
				{
					this.OnCUST_IDChanging(value);
					this.SendPropertyChanging();
					this._CUST_ID = value;
					this.SendPropertyChanged("CUST_ID");
					this.OnCUST_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADDRESS", DbType="VarChar(30)")]
		public string ADDRESS
		{
			get
			{
				return this._ADDRESS;
			}
			set
			{
				if ((this._ADDRESS != value))
				{
					this.OnADDRESSChanging(value);
					this.SendPropertyChanging();
					this._ADDRESS = value;
					this.SendPropertyChanged("ADDRESS");
					this.OnADDRESSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CITY", DbType="VarChar(20)")]
		public string CITY
		{
			get
			{
				return this._CITY;
			}
			set
			{
				if ((this._CITY != value))
				{
					this.OnCITYChanging(value);
					this.SendPropertyChanging();
					this._CITY = value;
					this.SendPropertyChanged("CITY");
					this.OnCITYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUST_TYPE_CD", DbType="VarChar(1) NOT NULL", CanBeNull=false)]
		public string CUST_TYPE_CD
		{
			get
			{
				return this._CUST_TYPE_CD;
			}
			set
			{
				if ((this._CUST_TYPE_CD != value))
				{
					this.OnCUST_TYPE_CDChanging(value);
					this.SendPropertyChanging();
					this._CUST_TYPE_CD = value;
					this.SendPropertyChanged("CUST_TYPE_CD");
					this.OnCUST_TYPE_CDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FED_ID", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string FED_ID
		{
			get
			{
				return this._FED_ID;
			}
			set
			{
				if ((this._FED_ID != value))
				{
					this.OnFED_IDChanging(value);
					this.SendPropertyChanging();
					this._FED_ID = value;
					this.SendPropertyChanged("FED_ID");
					this.OnFED_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_POSTAL_CODE", DbType="VarChar(10)")]
		public string POSTAL_CODE
		{
			get
			{
				return this._POSTAL_CODE;
			}
			set
			{
				if ((this._POSTAL_CODE != value))
				{
					this.OnPOSTAL_CODEChanging(value);
					this.SendPropertyChanging();
					this._POSTAL_CODE = value;
					this.SendPropertyChanged("POSTAL_CODE");
					this.OnPOSTAL_CODEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STATE", DbType="VarChar(20)")]
		public string STATE
		{
			get
			{
				return this._STATE;
			}
			set
			{
				if ((this._STATE != value))
				{
					this.OnSTATEChanging(value);
					this.SendPropertyChanging();
					this._STATE = value;
					this.SendPropertyChanged("STATE");
					this.OnSTATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_ACCOUNT", Storage="_ACCOUNT", ThisKey="CUST_ID", OtherKey="CUST_ID")]
		public EntitySet<ACCOUNT> ACCOUNT
		{
			get
			{
				return this._ACCOUNT;
			}
			set
			{
				this._ACCOUNT.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_BUSINESS", Storage="_BUSINESS", ThisKey="CUST_ID", OtherKey="CUST_ID", IsUnique=true, IsForeignKey=false)]
		public BUSINESS BUSINESS
		{
			get
			{
				return this._BUSINESS.Entity;
			}
			set
			{
				BUSINESS previousValue = this._BUSINESS.Entity;
				if (((previousValue != value) 
							|| (this._BUSINESS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BUSINESS.Entity = null;
						previousValue.CUSTOMER = null;
					}
					this._BUSINESS.Entity = value;
					if ((value != null))
					{
						value.CUSTOMER = this;
					}
					this.SendPropertyChanged("BUSINESS");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_INDIVIDUAL", Storage="_INDIVIDUAL", ThisKey="CUST_ID", OtherKey="CUST_ID", IsUnique=true, IsForeignKey=false)]
		public INDIVIDUAL INDIVIDUAL
		{
			get
			{
				return this._INDIVIDUAL.Entity;
			}
			set
			{
				INDIVIDUAL previousValue = this._INDIVIDUAL.Entity;
				if (((previousValue != value) 
							|| (this._INDIVIDUAL.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._INDIVIDUAL.Entity = null;
						previousValue.CUSTOMER = null;
					}
					this._INDIVIDUAL.Entity = value;
					if ((value != null))
					{
						value.CUSTOMER = this;
					}
					this.SendPropertyChanged("INDIVIDUAL");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_OFFICER", Storage="_OFFICER", ThisKey="CUST_ID", OtherKey="CUST_ID")]
		public EntitySet<OFFICER> OFFICER
		{
			get
			{
				return this._OFFICER;
			}
			set
			{
				this._OFFICER.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ACCOUNT(ACCOUNT entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = this;
		}
		
		private void detach_ACCOUNT(ACCOUNT entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = null;
		}
		
		private void attach_OFFICER(OFFICER entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = this;
		}
		
		private void detach_OFFICER(OFFICER entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DEPARTMENT")]
	public partial class DEPARTMENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DEPT_ID;
		
		private string _NAME;
		
		private EntitySet<EMPLOYEE> _EMPLOYEE;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDEPT_IDChanging(int value);
    partial void OnDEPT_IDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    #endregion
		
		public DEPARTMENT()
		{
			this._EMPLOYEE = new EntitySet<EMPLOYEE>(new Action<EMPLOYEE>(this.attach_EMPLOYEE), new Action<EMPLOYEE>(this.detach_EMPLOYEE));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEPT_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DEPT_ID
		{
			get
			{
				return this._DEPT_ID;
			}
			set
			{
				if ((this._DEPT_ID != value))
				{
					this.OnDEPT_IDChanging(value);
					this.SendPropertyChanging();
					this._DEPT_ID = value;
					this.SendPropertyChanged("DEPT_ID");
					this.OnDEPT_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DEPARTMENT_EMPLOYEE", Storage="_EMPLOYEE", ThisKey="DEPT_ID", OtherKey="DEPT_ID")]
		public EntitySet<EMPLOYEE> EMPLOYEE
		{
			get
			{
				return this._EMPLOYEE;
			}
			set
			{
				this._EMPLOYEE.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EMPLOYEE(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.DEPARTMENT = this;
		}
		
		private void detach_EMPLOYEE(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.DEPARTMENT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EMPLOYEE")]
	public partial class EMPLOYEE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EMP_ID;
		
		private System.Nullable<System.DateTime> _END_DATE;
		
		private string _FIRST_NAME;
		
		private string _LAST_NAME;
		
		private System.DateTime _START_DATE;
		
		private string _TITLE;
		
		private System.Nullable<int> _ASSIGNED_BRANCH_ID;
		
		private System.Nullable<int> _DEPT_ID;
		
		private System.Nullable<int> _SUPERIOR_EMP_ID;
		
		private EntitySet<ACC_TRANSACTION> _ACC_TRANSACTION;
		
		private EntitySet<ACCOUNT> _ACCOUNT;
		
		private EntitySet<EMPLOYEE> _EMPLOYEE2;
		
		private EntityRef<BRANCH> _BRANCH;
		
		private EntityRef<DEPARTMENT> _DEPARTMENT;
		
		private EntityRef<EMPLOYEE> _EMPLOYEE1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEMP_IDChanging(int value);
    partial void OnEMP_IDChanged();
    partial void OnEND_DATEChanging(System.Nullable<System.DateTime> value);
    partial void OnEND_DATEChanged();
    partial void OnFIRST_NAMEChanging(string value);
    partial void OnFIRST_NAMEChanged();
    partial void OnLAST_NAMEChanging(string value);
    partial void OnLAST_NAMEChanged();
    partial void OnSTART_DATEChanging(System.DateTime value);
    partial void OnSTART_DATEChanged();
    partial void OnTITLEChanging(string value);
    partial void OnTITLEChanged();
    partial void OnASSIGNED_BRANCH_IDChanging(System.Nullable<int> value);
    partial void OnASSIGNED_BRANCH_IDChanged();
    partial void OnDEPT_IDChanging(System.Nullable<int> value);
    partial void OnDEPT_IDChanged();
    partial void OnSUPERIOR_EMP_IDChanging(System.Nullable<int> value);
    partial void OnSUPERIOR_EMP_IDChanged();
    #endregion
		
		public EMPLOYEE()
		{
			this._ACC_TRANSACTION = new EntitySet<ACC_TRANSACTION>(new Action<ACC_TRANSACTION>(this.attach_ACC_TRANSACTION), new Action<ACC_TRANSACTION>(this.detach_ACC_TRANSACTION));
			this._ACCOUNT = new EntitySet<ACCOUNT>(new Action<ACCOUNT>(this.attach_ACCOUNT), new Action<ACCOUNT>(this.detach_ACCOUNT));
			this._EMPLOYEE2 = new EntitySet<EMPLOYEE>(new Action<EMPLOYEE>(this.attach_EMPLOYEE2), new Action<EMPLOYEE>(this.detach_EMPLOYEE2));
			this._BRANCH = default(EntityRef<BRANCH>);
			this._DEPARTMENT = default(EntityRef<DEPARTMENT>);
			this._EMPLOYEE1 = default(EntityRef<EMPLOYEE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMP_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EMP_ID
		{
			get
			{
				return this._EMP_ID;
			}
			set
			{
				if ((this._EMP_ID != value))
				{
					this.OnEMP_IDChanging(value);
					this.SendPropertyChanging();
					this._EMP_ID = value;
					this.SendPropertyChanged("EMP_ID");
					this.OnEMP_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_END_DATE", DbType="DateTime")]
		public System.Nullable<System.DateTime> END_DATE
		{
			get
			{
				return this._END_DATE;
			}
			set
			{
				if ((this._END_DATE != value))
				{
					this.OnEND_DATEChanging(value);
					this.SendPropertyChanging();
					this._END_DATE = value;
					this.SendPropertyChanged("END_DATE");
					this.OnEND_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIRST_NAME", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string FIRST_NAME
		{
			get
			{
				return this._FIRST_NAME;
			}
			set
			{
				if ((this._FIRST_NAME != value))
				{
					this.OnFIRST_NAMEChanging(value);
					this.SendPropertyChanging();
					this._FIRST_NAME = value;
					this.SendPropertyChanged("FIRST_NAME");
					this.OnFIRST_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LAST_NAME", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string LAST_NAME
		{
			get
			{
				return this._LAST_NAME;
			}
			set
			{
				if ((this._LAST_NAME != value))
				{
					this.OnLAST_NAMEChanging(value);
					this.SendPropertyChanging();
					this._LAST_NAME = value;
					this.SendPropertyChanged("LAST_NAME");
					this.OnLAST_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_START_DATE", DbType="DateTime NOT NULL")]
		public System.DateTime START_DATE
		{
			get
			{
				return this._START_DATE;
			}
			set
			{
				if ((this._START_DATE != value))
				{
					this.OnSTART_DATEChanging(value);
					this.SendPropertyChanging();
					this._START_DATE = value;
					this.SendPropertyChanged("START_DATE");
					this.OnSTART_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TITLE", DbType="VarChar(20)")]
		public string TITLE
		{
			get
			{
				return this._TITLE;
			}
			set
			{
				if ((this._TITLE != value))
				{
					this.OnTITLEChanging(value);
					this.SendPropertyChanging();
					this._TITLE = value;
					this.SendPropertyChanged("TITLE");
					this.OnTITLEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ASSIGNED_BRANCH_ID", DbType="Int")]
		public System.Nullable<int> ASSIGNED_BRANCH_ID
		{
			get
			{
				return this._ASSIGNED_BRANCH_ID;
			}
			set
			{
				if ((this._ASSIGNED_BRANCH_ID != value))
				{
					if (this._BRANCH.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnASSIGNED_BRANCH_IDChanging(value);
					this.SendPropertyChanging();
					this._ASSIGNED_BRANCH_ID = value;
					this.SendPropertyChanged("ASSIGNED_BRANCH_ID");
					this.OnASSIGNED_BRANCH_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEPT_ID", DbType="Int")]
		public System.Nullable<int> DEPT_ID
		{
			get
			{
				return this._DEPT_ID;
			}
			set
			{
				if ((this._DEPT_ID != value))
				{
					if (this._DEPARTMENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDEPT_IDChanging(value);
					this.SendPropertyChanging();
					this._DEPT_ID = value;
					this.SendPropertyChanged("DEPT_ID");
					this.OnDEPT_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SUPERIOR_EMP_ID", DbType="Int")]
		public System.Nullable<int> SUPERIOR_EMP_ID
		{
			get
			{
				return this._SUPERIOR_EMP_ID;
			}
			set
			{
				if ((this._SUPERIOR_EMP_ID != value))
				{
					if (this._EMPLOYEE1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSUPERIOR_EMP_IDChanging(value);
					this.SendPropertyChanging();
					this._SUPERIOR_EMP_ID = value;
					this.SendPropertyChanged("SUPERIOR_EMP_ID");
					this.OnSUPERIOR_EMP_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_ACC_TRANSACTION", Storage="_ACC_TRANSACTION", ThisKey="EMP_ID", OtherKey="TELLER_EMP_ID")]
		public EntitySet<ACC_TRANSACTION> ACC_TRANSACTION
		{
			get
			{
				return this._ACC_TRANSACTION;
			}
			set
			{
				this._ACC_TRANSACTION.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_ACCOUNT", Storage="_ACCOUNT", ThisKey="EMP_ID", OtherKey="OPEN_EMP_ID")]
		public EntitySet<ACCOUNT> ACCOUNT
		{
			get
			{
				return this._ACCOUNT;
			}
			set
			{
				this._ACCOUNT.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_EMPLOYEE", Storage="_EMPLOYEE2", ThisKey="EMP_ID", OtherKey="SUPERIOR_EMP_ID")]
		public EntitySet<EMPLOYEE> EMPLOYEE2
		{
			get
			{
				return this._EMPLOYEE2;
			}
			set
			{
				this._EMPLOYEE2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BRANCH_EMPLOYEE", Storage="_BRANCH", ThisKey="ASSIGNED_BRANCH_ID", OtherKey="BRANCH_ID", IsForeignKey=true)]
		public BRANCH BRANCH
		{
			get
			{
				return this._BRANCH.Entity;
			}
			set
			{
				BRANCH previousValue = this._BRANCH.Entity;
				if (((previousValue != value) 
							|| (this._BRANCH.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BRANCH.Entity = null;
						previousValue.EMPLOYEE.Remove(this);
					}
					this._BRANCH.Entity = value;
					if ((value != null))
					{
						value.EMPLOYEE.Add(this);
						this._ASSIGNED_BRANCH_ID = value.BRANCH_ID;
					}
					else
					{
						this._ASSIGNED_BRANCH_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("BRANCH");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DEPARTMENT_EMPLOYEE", Storage="_DEPARTMENT", ThisKey="DEPT_ID", OtherKey="DEPT_ID", IsForeignKey=true)]
		public DEPARTMENT DEPARTMENT
		{
			get
			{
				return this._DEPARTMENT.Entity;
			}
			set
			{
				DEPARTMENT previousValue = this._DEPARTMENT.Entity;
				if (((previousValue != value) 
							|| (this._DEPARTMENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DEPARTMENT.Entity = null;
						previousValue.EMPLOYEE.Remove(this);
					}
					this._DEPARTMENT.Entity = value;
					if ((value != null))
					{
						value.EMPLOYEE.Add(this);
						this._DEPT_ID = value.DEPT_ID;
					}
					else
					{
						this._DEPT_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DEPARTMENT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_EMPLOYEE", Storage="_EMPLOYEE1", ThisKey="SUPERIOR_EMP_ID", OtherKey="EMP_ID", IsForeignKey=true)]
		public EMPLOYEE EMPLOYEE1
		{
			get
			{
				return this._EMPLOYEE1.Entity;
			}
			set
			{
				EMPLOYEE previousValue = this._EMPLOYEE1.Entity;
				if (((previousValue != value) 
							|| (this._EMPLOYEE1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EMPLOYEE1.Entity = null;
						previousValue.EMPLOYEE2.Remove(this);
					}
					this._EMPLOYEE1.Entity = value;
					if ((value != null))
					{
						value.EMPLOYEE2.Add(this);
						this._SUPERIOR_EMP_ID = value.EMP_ID;
					}
					else
					{
						this._SUPERIOR_EMP_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("EMPLOYEE1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ACC_TRANSACTION(ACC_TRANSACTION entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE = this;
		}
		
		private void detach_ACC_TRANSACTION(ACC_TRANSACTION entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE = null;
		}
		
		private void attach_ACCOUNT(ACCOUNT entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE = this;
		}
		
		private void detach_ACCOUNT(ACCOUNT entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE = null;
		}
		
		private void attach_EMPLOYEE2(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE1 = this;
		}
		
		private void detach_EMPLOYEE2(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.INDIVIDUAL")]
	public partial class INDIVIDUAL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<System.DateTime> _BIRTH_DATE;
		
		private string _FIRST_NAME;
		
		private string _LAST_NAME;
		
		private int _CUST_ID;
		
		private EntityRef<CUSTOMER> _CUSTOMER;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBIRTH_DATEChanging(System.Nullable<System.DateTime> value);
    partial void OnBIRTH_DATEChanged();
    partial void OnFIRST_NAMEChanging(string value);
    partial void OnFIRST_NAMEChanged();
    partial void OnLAST_NAMEChanging(string value);
    partial void OnLAST_NAMEChanged();
    partial void OnCUST_IDChanging(int value);
    partial void OnCUST_IDChanged();
    #endregion
		
		public INDIVIDUAL()
		{
			this._CUSTOMER = default(EntityRef<CUSTOMER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BIRTH_DATE", DbType="DateTime")]
		public System.Nullable<System.DateTime> BIRTH_DATE
		{
			get
			{
				return this._BIRTH_DATE;
			}
			set
			{
				if ((this._BIRTH_DATE != value))
				{
					this.OnBIRTH_DATEChanging(value);
					this.SendPropertyChanging();
					this._BIRTH_DATE = value;
					this.SendPropertyChanged("BIRTH_DATE");
					this.OnBIRTH_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIRST_NAME", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string FIRST_NAME
		{
			get
			{
				return this._FIRST_NAME;
			}
			set
			{
				if ((this._FIRST_NAME != value))
				{
					this.OnFIRST_NAMEChanging(value);
					this.SendPropertyChanging();
					this._FIRST_NAME = value;
					this.SendPropertyChanged("FIRST_NAME");
					this.OnFIRST_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LAST_NAME", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string LAST_NAME
		{
			get
			{
				return this._LAST_NAME;
			}
			set
			{
				if ((this._LAST_NAME != value))
				{
					this.OnLAST_NAMEChanging(value);
					this.SendPropertyChanging();
					this._LAST_NAME = value;
					this.SendPropertyChanged("LAST_NAME");
					this.OnLAST_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUST_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CUST_ID
		{
			get
			{
				return this._CUST_ID;
			}
			set
			{
				if ((this._CUST_ID != value))
				{
					if (this._CUSTOMER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCUST_IDChanging(value);
					this.SendPropertyChanging();
					this._CUST_ID = value;
					this.SendPropertyChanged("CUST_ID");
					this.OnCUST_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_INDIVIDUAL", Storage="_CUSTOMER", ThisKey="CUST_ID", OtherKey="CUST_ID", IsForeignKey=true)]
		public CUSTOMER CUSTOMER
		{
			get
			{
				return this._CUSTOMER.Entity;
			}
			set
			{
				CUSTOMER previousValue = this._CUSTOMER.Entity;
				if (((previousValue != value) 
							|| (this._CUSTOMER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CUSTOMER.Entity = null;
						previousValue.INDIVIDUAL = null;
					}
					this._CUSTOMER.Entity = value;
					if ((value != null))
					{
						value.INDIVIDUAL = this;
						this._CUST_ID = value.CUST_ID;
					}
					else
					{
						this._CUST_ID = default(int);
					}
					this.SendPropertyChanged("CUSTOMER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OFFICER")]
	public partial class OFFICER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OFFICER_ID;
		
		private System.Nullable<System.DateTime> _END_DATE;
		
		private string _FIRST_NAME;
		
		private string _LAST_NAME;
		
		private System.DateTime _START_DATE;
		
		private string _TITLE;
		
		private System.Nullable<int> _CUST_ID;
		
		private EntityRef<CUSTOMER> _CUSTOMER;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOFFICER_IDChanging(int value);
    partial void OnOFFICER_IDChanged();
    partial void OnEND_DATEChanging(System.Nullable<System.DateTime> value);
    partial void OnEND_DATEChanged();
    partial void OnFIRST_NAMEChanging(string value);
    partial void OnFIRST_NAMEChanged();
    partial void OnLAST_NAMEChanging(string value);
    partial void OnLAST_NAMEChanged();
    partial void OnSTART_DATEChanging(System.DateTime value);
    partial void OnSTART_DATEChanged();
    partial void OnTITLEChanging(string value);
    partial void OnTITLEChanged();
    partial void OnCUST_IDChanging(System.Nullable<int> value);
    partial void OnCUST_IDChanged();
    #endregion
		
		public OFFICER()
		{
			this._CUSTOMER = default(EntityRef<CUSTOMER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OFFICER_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OFFICER_ID
		{
			get
			{
				return this._OFFICER_ID;
			}
			set
			{
				if ((this._OFFICER_ID != value))
				{
					this.OnOFFICER_IDChanging(value);
					this.SendPropertyChanging();
					this._OFFICER_ID = value;
					this.SendPropertyChanged("OFFICER_ID");
					this.OnOFFICER_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_END_DATE", DbType="DateTime")]
		public System.Nullable<System.DateTime> END_DATE
		{
			get
			{
				return this._END_DATE;
			}
			set
			{
				if ((this._END_DATE != value))
				{
					this.OnEND_DATEChanging(value);
					this.SendPropertyChanging();
					this._END_DATE = value;
					this.SendPropertyChanged("END_DATE");
					this.OnEND_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIRST_NAME", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string FIRST_NAME
		{
			get
			{
				return this._FIRST_NAME;
			}
			set
			{
				if ((this._FIRST_NAME != value))
				{
					this.OnFIRST_NAMEChanging(value);
					this.SendPropertyChanging();
					this._FIRST_NAME = value;
					this.SendPropertyChanged("FIRST_NAME");
					this.OnFIRST_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LAST_NAME", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string LAST_NAME
		{
			get
			{
				return this._LAST_NAME;
			}
			set
			{
				if ((this._LAST_NAME != value))
				{
					this.OnLAST_NAMEChanging(value);
					this.SendPropertyChanging();
					this._LAST_NAME = value;
					this.SendPropertyChanged("LAST_NAME");
					this.OnLAST_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_START_DATE", DbType="DateTime NOT NULL")]
		public System.DateTime START_DATE
		{
			get
			{
				return this._START_DATE;
			}
			set
			{
				if ((this._START_DATE != value))
				{
					this.OnSTART_DATEChanging(value);
					this.SendPropertyChanging();
					this._START_DATE = value;
					this.SendPropertyChanged("START_DATE");
					this.OnSTART_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TITLE", DbType="VarChar(20)")]
		public string TITLE
		{
			get
			{
				return this._TITLE;
			}
			set
			{
				if ((this._TITLE != value))
				{
					this.OnTITLEChanging(value);
					this.SendPropertyChanging();
					this._TITLE = value;
					this.SendPropertyChanged("TITLE");
					this.OnTITLEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUST_ID", DbType="Int")]
		public System.Nullable<int> CUST_ID
		{
			get
			{
				return this._CUST_ID;
			}
			set
			{
				if ((this._CUST_ID != value))
				{
					if (this._CUSTOMER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCUST_IDChanging(value);
					this.SendPropertyChanging();
					this._CUST_ID = value;
					this.SendPropertyChanged("CUST_ID");
					this.OnCUST_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_OFFICER", Storage="_CUSTOMER", ThisKey="CUST_ID", OtherKey="CUST_ID", IsForeignKey=true)]
		public CUSTOMER CUSTOMER
		{
			get
			{
				return this._CUSTOMER.Entity;
			}
			set
			{
				CUSTOMER previousValue = this._CUSTOMER.Entity;
				if (((previousValue != value) 
							|| (this._CUSTOMER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CUSTOMER.Entity = null;
						previousValue.OFFICER.Remove(this);
					}
					this._CUSTOMER.Entity = value;
					if ((value != null))
					{
						value.OFFICER.Add(this);
						this._CUST_ID = value.CUST_ID;
					}
					else
					{
						this._CUST_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CUSTOMER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PRODUCT")]
	public partial class PRODUCT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PRODUCT_CD;
		
		private System.Nullable<System.DateTime> _DATE_OFFERED;
		
		private System.Nullable<System.DateTime> _DATE_RETIRED;
		
		private string _NAME;
		
		private string _PRODUCT_TYPE_CD;
		
		private EntitySet<ACCOUNT> _ACCOUNT;
		
		private EntityRef<PRODUCT_TYPE> _PRODUCT_TYPE;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPRODUCT_CDChanging(string value);
    partial void OnPRODUCT_CDChanged();
    partial void OnDATE_OFFEREDChanging(System.Nullable<System.DateTime> value);
    partial void OnDATE_OFFEREDChanged();
    partial void OnDATE_RETIREDChanging(System.Nullable<System.DateTime> value);
    partial void OnDATE_RETIREDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnPRODUCT_TYPE_CDChanging(string value);
    partial void OnPRODUCT_TYPE_CDChanged();
    #endregion
		
		public PRODUCT()
		{
			this._ACCOUNT = new EntitySet<ACCOUNT>(new Action<ACCOUNT>(this.attach_ACCOUNT), new Action<ACCOUNT>(this.detach_ACCOUNT));
			this._PRODUCT_TYPE = default(EntityRef<PRODUCT_TYPE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCT_CD", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PRODUCT_CD
		{
			get
			{
				return this._PRODUCT_CD;
			}
			set
			{
				if ((this._PRODUCT_CD != value))
				{
					this.OnPRODUCT_CDChanging(value);
					this.SendPropertyChanging();
					this._PRODUCT_CD = value;
					this.SendPropertyChanged("PRODUCT_CD");
					this.OnPRODUCT_CDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATE_OFFERED", DbType="DateTime")]
		public System.Nullable<System.DateTime> DATE_OFFERED
		{
			get
			{
				return this._DATE_OFFERED;
			}
			set
			{
				if ((this._DATE_OFFERED != value))
				{
					this.OnDATE_OFFEREDChanging(value);
					this.SendPropertyChanging();
					this._DATE_OFFERED = value;
					this.SendPropertyChanged("DATE_OFFERED");
					this.OnDATE_OFFEREDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATE_RETIRED", DbType="DateTime")]
		public System.Nullable<System.DateTime> DATE_RETIRED
		{
			get
			{
				return this._DATE_RETIRED;
			}
			set
			{
				if ((this._DATE_RETIRED != value))
				{
					this.OnDATE_RETIREDChanging(value);
					this.SendPropertyChanging();
					this._DATE_RETIRED = value;
					this.SendPropertyChanged("DATE_RETIRED");
					this.OnDATE_RETIREDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCT_TYPE_CD", DbType="VarChar(255)")]
		public string PRODUCT_TYPE_CD
		{
			get
			{
				return this._PRODUCT_TYPE_CD;
			}
			set
			{
				if ((this._PRODUCT_TYPE_CD != value))
				{
					if (this._PRODUCT_TYPE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPRODUCT_TYPE_CDChanging(value);
					this.SendPropertyChanging();
					this._PRODUCT_TYPE_CD = value;
					this.SendPropertyChanged("PRODUCT_TYPE_CD");
					this.OnPRODUCT_TYPE_CDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCT_ACCOUNT", Storage="_ACCOUNT", ThisKey="PRODUCT_CD", OtherKey="PRODUCT_CD")]
		public EntitySet<ACCOUNT> ACCOUNT
		{
			get
			{
				return this._ACCOUNT;
			}
			set
			{
				this._ACCOUNT.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCT_TYPE_PRODUCT", Storage="_PRODUCT_TYPE", ThisKey="PRODUCT_TYPE_CD", OtherKey="PRODUCT_TYPE_CD", IsForeignKey=true)]
		public PRODUCT_TYPE PRODUCT_TYPE
		{
			get
			{
				return this._PRODUCT_TYPE.Entity;
			}
			set
			{
				PRODUCT_TYPE previousValue = this._PRODUCT_TYPE.Entity;
				if (((previousValue != value) 
							|| (this._PRODUCT_TYPE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PRODUCT_TYPE.Entity = null;
						previousValue.PRODUCT.Remove(this);
					}
					this._PRODUCT_TYPE.Entity = value;
					if ((value != null))
					{
						value.PRODUCT.Add(this);
						this._PRODUCT_TYPE_CD = value.PRODUCT_TYPE_CD;
					}
					else
					{
						this._PRODUCT_TYPE_CD = default(string);
					}
					this.SendPropertyChanged("PRODUCT_TYPE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ACCOUNT(ACCOUNT entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCT = this;
		}
		
		private void detach_ACCOUNT(ACCOUNT entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PRODUCT_TYPE")]
	public partial class PRODUCT_TYPE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PRODUCT_TYPE_CD;
		
		private string _NAME;
		
		private EntitySet<PRODUCT> _PRODUCT;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPRODUCT_TYPE_CDChanging(string value);
    partial void OnPRODUCT_TYPE_CDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    #endregion
		
		public PRODUCT_TYPE()
		{
			this._PRODUCT = new EntitySet<PRODUCT>(new Action<PRODUCT>(this.attach_PRODUCT), new Action<PRODUCT>(this.detach_PRODUCT));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCT_TYPE_CD", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PRODUCT_TYPE_CD
		{
			get
			{
				return this._PRODUCT_TYPE_CD;
			}
			set
			{
				if ((this._PRODUCT_TYPE_CD != value))
				{
					this.OnPRODUCT_TYPE_CDChanging(value);
					this.SendPropertyChanging();
					this._PRODUCT_TYPE_CD = value;
					this.SendPropertyChanged("PRODUCT_TYPE_CD");
					this.OnPRODUCT_TYPE_CDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="VarChar(50)")]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCT_TYPE_PRODUCT", Storage="_PRODUCT", ThisKey="PRODUCT_TYPE_CD", OtherKey="PRODUCT_TYPE_CD")]
		public EntitySet<PRODUCT> PRODUCT
		{
			get
			{
				return this._PRODUCT;
			}
			set
			{
				this._PRODUCT.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PRODUCT(PRODUCT entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCT_TYPE = this;
		}
		
		private void detach_PRODUCT(PRODUCT entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCT_TYPE = null;
		}
	}
}
#pragma warning restore 1591
